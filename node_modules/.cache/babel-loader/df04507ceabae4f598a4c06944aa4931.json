{"ast":null,"code":"import { formatTime } from './helpers';\nimport diffLogger from './diff';\n/**\n * Get log level string based on supplied params\n *\n * @param {string | function | object} level - console[level]\n * @param {object} action - selected action\n * @param {array} payload - selected payload\n * @param {string} type - log entry type\n *\n * @returns {string} level\n */\n\nfunction getLogLevel(level, action, payload, type) {\n  switch (typeof level) {\n    case 'object':\n      return typeof level[type] === 'function' ? level[type](...payload) : level[type];\n\n    case 'function':\n      return level(action);\n\n    default:\n      return level;\n  }\n}\n\nfunction defaultTitleFormatter(options) {\n  const {\n    timestamp,\n    duration\n  } = options;\n  return (action, time, took) => {\n    const parts = ['action'];\n    parts.push(`%c${String(action.type)}`);\n    if (timestamp) parts.push(`%c@ ${time}`);\n    if (duration) parts.push(`%c(in ${took.toFixed(2)} ms)`);\n    return parts.join(' ');\n  };\n}\n\nfunction printBuffer(buffer, options) {\n  const {\n    logger,\n    actionTransformer,\n    titleFormatter = defaultTitleFormatter(options),\n    collapsed,\n    colors,\n    level,\n    diff\n  } = options;\n  const isUsingDefaultFormatter = typeof options.titleFormatter === 'undefined';\n  buffer.forEach((logEntry, key) => {\n    const {\n      started,\n      startedTime,\n      action,\n      prevState,\n      error\n    } = logEntry;\n    let {\n      took,\n      nextState\n    } = logEntry;\n    const nextEntry = buffer[key + 1];\n\n    if (nextEntry) {\n      nextState = nextEntry.prevState;\n      took = nextEntry.started - started;\n    } // Message\n\n\n    const formattedAction = actionTransformer(action);\n    const isCollapsed = typeof collapsed === 'function' ? collapsed(() => nextState, action, logEntry) : collapsed;\n    const formattedTime = formatTime(startedTime);\n    const titleCSS = colors.title ? `color: ${colors.title(formattedAction)};` : '';\n    const headerCSS = ['color: gray; font-weight: lighter;'];\n    headerCSS.push(titleCSS);\n    if (options.timestamp) headerCSS.push('color: gray; font-weight: lighter;');\n    if (options.duration) headerCSS.push('color: gray; font-weight: lighter;');\n    const title = titleFormatter(formattedAction, formattedTime, took); // Render\n\n    try {\n      if (isCollapsed) {\n        if (colors.title && isUsingDefaultFormatter) {\n          logger.groupCollapsed(`%c ${title}`, ...headerCSS);\n        } else logger.groupCollapsed(title);\n      } else if (colors.title && isUsingDefaultFormatter) {\n        logger.group(`%c ${title}`, ...headerCSS);\n      } else {\n        logger.group(title);\n      }\n    } catch (e) {\n      logger.log(title);\n    }\n\n    const prevStateLevel = getLogLevel(level, formattedAction, [prevState], 'prevState');\n    const actionLevel = getLogLevel(level, formattedAction, [formattedAction], 'action');\n    const errorLevel = getLogLevel(level, formattedAction, [error, prevState], 'error');\n    const nextStateLevel = getLogLevel(level, formattedAction, [nextState], 'nextState');\n\n    if (prevStateLevel) {\n      if (colors.prevState) {\n        const styles = `color: ${colors.prevState(prevState)}; font-weight: bold`;\n        logger[prevStateLevel]('%c prev state', styles, prevState);\n      } else logger[prevStateLevel]('prev state', prevState);\n    }\n\n    if (actionLevel) {\n      if (colors.action) {\n        const styles = `color: ${colors.action(formattedAction)}; font-weight: bold`;\n        logger[actionLevel]('%c action    ', styles, formattedAction);\n      } else logger[actionLevel]('action    ', formattedAction);\n    }\n\n    if (error && errorLevel) {\n      if (colors.error) {\n        const styles = `color: ${colors.error(error, prevState)}; font-weight: bold;`;\n        logger[errorLevel]('%c error     ', styles, error);\n      } else logger[errorLevel]('error     ', error);\n    }\n\n    if (nextStateLevel) {\n      if (colors.nextState) {\n        const styles = `color: ${colors.nextState(nextState)}; font-weight: bold`;\n        logger[nextStateLevel]('%c next state', styles, nextState);\n      } else logger[nextStateLevel]('next state', nextState);\n    }\n\n    if (diff) {\n      diffLogger(prevState, nextState, logger, isCollapsed);\n    }\n\n    try {\n      logger.groupEnd();\n    } catch (e) {\n      logger.log('—— log end ——');\n    }\n  });\n}\n\nexport default printBuffer;","map":{"version":3,"sources":["/Users/user/Desktop/robofriends/node_modules/redux-logger/src/core.js"],"names":["formatTime","diffLogger","getLogLevel","level","action","payload","type","defaultTitleFormatter","options","timestamp","duration","time","took","parts","push","String","toFixed","join","printBuffer","buffer","logger","actionTransformer","titleFormatter","collapsed","colors","diff","isUsingDefaultFormatter","forEach","logEntry","key","started","startedTime","prevState","error","nextState","nextEntry","formattedAction","isCollapsed","formattedTime","titleCSS","title","headerCSS","groupCollapsed","group","e","log","prevStateLevel","actionLevel","errorLevel","nextStateLevel","styles","groupEnd"],"mappings":"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","sourcesContent":["import { formatTime } from './helpers';\nimport diffLogger from './diff';\n\n/**\n * Get log level string based on supplied params\n *\n * @param {string | function | object} level - console[level]\n * @param {object} action - selected action\n * @param {array} payload - selected payload\n * @param {string} type - log entry type\n *\n * @returns {string} level\n */\nfunction getLogLevel(level, action, payload, type) {\n  switch (typeof level) {\n    case 'object':\n      return typeof level[type] === 'function' ? level[type](...payload) : level[type];\n    case 'function':\n      return level(action);\n    default:\n      return level;\n  }\n}\n\nfunction defaultTitleFormatter(options) {\n  const { timestamp, duration } = options;\n\n  return (action, time, took) => {\n    const parts = ['action'];\n\n    parts.push(`%c${String(action.type)}`);\n    if (timestamp) parts.push(`%c@ ${time}`);\n    if (duration) parts.push(`%c(in ${took.toFixed(2)} ms)`);\n\n    return parts.join(' ');\n  };\n}\n\nfunction printBuffer(buffer, options) {\n  const {\n    logger,\n    actionTransformer,\n    titleFormatter = defaultTitleFormatter(options),\n    collapsed,\n    colors,\n    level,\n    diff,\n  } = options;\n\n  const isUsingDefaultFormatter = typeof options.titleFormatter === 'undefined';\n\n  buffer.forEach((logEntry, key) => {\n    const { started, startedTime, action, prevState, error } = logEntry;\n    let { took, nextState } = logEntry;\n    const nextEntry = buffer[key + 1];\n\n    if (nextEntry) {\n      nextState = nextEntry.prevState;\n      took = nextEntry.started - started;\n    }\n\n    // Message\n    const formattedAction = actionTransformer(action);\n    const isCollapsed = typeof collapsed === 'function'\n      ? collapsed(() => nextState, action, logEntry)\n      : collapsed;\n\n    const formattedTime = formatTime(startedTime);\n    const titleCSS = colors.title ? `color: ${colors.title(formattedAction)};` : '';\n    const headerCSS = ['color: gray; font-weight: lighter;'];\n    headerCSS.push(titleCSS);\n    if (options.timestamp) headerCSS.push('color: gray; font-weight: lighter;');\n    if (options.duration) headerCSS.push('color: gray; font-weight: lighter;');\n    const title = titleFormatter(formattedAction, formattedTime, took);\n\n    // Render\n    try {\n      if (isCollapsed) {\n        if (colors.title && isUsingDefaultFormatter) {\n          logger.groupCollapsed(`%c ${title}`, ...headerCSS);\n        } else logger.groupCollapsed(title);\n      } else if (colors.title && isUsingDefaultFormatter) {\n        logger.group(`%c ${title}`, ...headerCSS);\n      } else {\n        logger.group(title);\n      }\n    } catch (e) {\n      logger.log(title);\n    }\n\n    const prevStateLevel = getLogLevel(level, formattedAction, [prevState], 'prevState');\n    const actionLevel = getLogLevel(level, formattedAction, [formattedAction], 'action');\n    const errorLevel = getLogLevel(level, formattedAction, [error, prevState], 'error');\n    const nextStateLevel = getLogLevel(level, formattedAction, [nextState], 'nextState');\n\n    if (prevStateLevel) {\n      if (colors.prevState) {\n        const styles = `color: ${colors.prevState(prevState)}; font-weight: bold`;\n\n        logger[prevStateLevel]('%c prev state', styles, prevState);\n      } else logger[prevStateLevel]('prev state', prevState);\n    }\n\n    if (actionLevel) {\n      if (colors.action) {\n        const styles = `color: ${colors.action(formattedAction)}; font-weight: bold`;\n\n        logger[actionLevel]('%c action    ', styles, formattedAction);\n      } else logger[actionLevel]('action    ', formattedAction);\n    }\n\n    if (error && errorLevel) {\n      if (colors.error) {\n        const styles = `color: ${colors.error(error, prevState)}; font-weight: bold;`;\n\n        logger[errorLevel]('%c error     ', styles, error);\n      } else logger[errorLevel]('error     ', error);\n    }\n\n    if (nextStateLevel) {\n      if (colors.nextState) {\n        const styles = `color: ${colors.nextState(nextState)}; font-weight: bold`;\n\n        logger[nextStateLevel]('%c next state', styles, nextState);\n      } else logger[nextStateLevel]('next state', nextState);\n    }\n\n    if (diff) {\n      diffLogger(prevState, nextState, logger, isCollapsed);\n    }\n\n    try {\n      logger.groupEnd();\n    } catch (e) {\n      logger.log('—— log end ——');\n    }\n  });\n}\n\nexport default printBuffer;\n"]},"metadata":{},"sourceType":"module"}